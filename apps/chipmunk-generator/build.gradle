plugins {
    id 'buildlogic.java-application-conventions'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.google.protobuf' version '0.9.4'
}

dependencies {
    implementation 'org.apache.commons:commons-text'
    implementation project(':libs:awsconfig')
    
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    
    // Protobuf for serialization
    implementation 'com.google.protobuf:protobuf-java:3.25.1'
    
    // Jackson for JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2'
    
    // Lombok for reducing boilerplate
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.1'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.1'
    }
    
    generateProtoTasks {
        all()*.plugins {
            // No additional plugins needed for basic Java generation
        }
    }
}

// Copy proto files to the protobuf source directory
task copyProtoFiles(type: Copy) {
    from "$rootDir/iris.proto"
    into "src/main/proto"
}

// Make sure proto files are copied before protobuf generation
generateProto.dependsOn copyProtoFiles
processResources.dependsOn copyProtoFiles

application {
    // Define the main class for the application.
    mainClass = 'org.jaiswarsecurities.chipmunkgenerator.ChipmunkGeneratorApplication'
}