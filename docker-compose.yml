services:
  kafka:
    image: apache/kafka:4.1.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # KRaft mode configuration
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      # Log and storage configuration  
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_METADATA_LOG_DIR: /var/lib/kafka/data

      # Topic auto-creation settings
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      
      # Other important settings for single-node setup
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      
      # JVM settings
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    user: "0:0"

  kafka-init:
    image: apache/kafka:4.1.0
    container_name: kafka-init
    networks:
      - default
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts:ro
    command: ["bash", "/scripts/kafka-init.sh"]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
      
      # UI Configuration
      AUTH_TYPE: "DISABLED"
      MANAGEMENT_HEALTH_LDAP_ENABLED: "false"
      
      # Performance settings
      SPRING_JPA_OPEN_IN_VIEW: "false"
      
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    hostname: localstack
    ports:
      - "4566:4566"
    environment:
      # LocalStack configuration
      SERVICES: s3,sqs,dynamodb,kinesis
      DEBUG: 1
      DOCKER_HOST: unix:///var/run/docker.sock
      LOCALSTACK_HOST: localhost.localstack.cloud
      PERSISTENCE: 1
      
      # AWS configuration for LocalStack
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      
      # Service-specific configuration
      S3_ENABLE_VIRTUALHOST_STYLE: "false"
      
    volumes:
      - localstack-data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

volumes:
  kafka-data:
    driver: local
  localstack-data:
    driver: local

networks:
  default:
    name: kafka-network